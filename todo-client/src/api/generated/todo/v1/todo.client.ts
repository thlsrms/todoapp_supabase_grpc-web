// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size
// @generated from protobuf file "todo/v1/todo.proto" (package "todo.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Todo } from "./todo";
import type { DeleteTaskResponse } from "./todo";
import type { DeleteTaskRequest } from "./todo";
import type { FetchTaskResponse } from "./todo";
import type { FetchTaskRequest } from "./todo";
import type { UpdateTaskResponse } from "./todo";
import type { UpdateTaskRequest } from "./todo";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateTaskResponse } from "./todo";
import type { CreateTaskRequest } from "./todo";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service todo.v1.Todo
 */
export interface ITodoClient {
    /**
     * @generated from protobuf rpc: CreateTask(todo.v1.CreateTaskRequest) returns (todo.v1.CreateTaskResponse);
     */
    createTask(input: CreateTaskRequest, options?: RpcOptions): UnaryCall<CreateTaskRequest, CreateTaskResponse>;
    /**
     * @generated from protobuf rpc: UpdateTask(todo.v1.UpdateTaskRequest) returns (todo.v1.UpdateTaskResponse);
     */
    updateTask(input: UpdateTaskRequest, options?: RpcOptions): UnaryCall<UpdateTaskRequest, UpdateTaskResponse>;
    /**
     * @generated from protobuf rpc: FetchTask(todo.v1.FetchTaskRequest) returns (todo.v1.FetchTaskResponse);
     */
    fetchTask(input: FetchTaskRequest, options?: RpcOptions): UnaryCall<FetchTaskRequest, FetchTaskResponse>;
    /**
     * @generated from protobuf rpc: DeleteTask(todo.v1.DeleteTaskRequest) returns (todo.v1.DeleteTaskResponse);
     */
    deleteTask(input: DeleteTaskRequest, options?: RpcOptions): UnaryCall<DeleteTaskRequest, DeleteTaskResponse>;
}
/**
 * @generated from protobuf service todo.v1.Todo
 */
export class TodoClient implements ITodoClient, ServiceInfo {
    typeName = Todo.typeName;
    methods = Todo.methods;
    options = Todo.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateTask(todo.v1.CreateTaskRequest) returns (todo.v1.CreateTaskResponse);
     */
    createTask(input: CreateTaskRequest, options?: RpcOptions): UnaryCall<CreateTaskRequest, CreateTaskResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTaskRequest, CreateTaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTask(todo.v1.UpdateTaskRequest) returns (todo.v1.UpdateTaskResponse);
     */
    updateTask(input: UpdateTaskRequest, options?: RpcOptions): UnaryCall<UpdateTaskRequest, UpdateTaskResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTaskRequest, UpdateTaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FetchTask(todo.v1.FetchTaskRequest) returns (todo.v1.FetchTaskResponse);
     */
    fetchTask(input: FetchTaskRequest, options?: RpcOptions): UnaryCall<FetchTaskRequest, FetchTaskResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<FetchTaskRequest, FetchTaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteTask(todo.v1.DeleteTaskRequest) returns (todo.v1.DeleteTaskResponse);
     */
    deleteTask(input: DeleteTaskRequest, options?: RpcOptions): UnaryCall<DeleteTaskRequest, DeleteTaskResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteTaskRequest, DeleteTaskResponse>("unary", this._transport, method, opt, input);
    }
}
