// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size
// @generated from protobuf file "todo/v1/todo.proto" (package "todo.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { TaskList } from "./task";
import { Task } from "./task";
/**
 * @generated from protobuf message todo.v1.CreateTaskRequest
 */
export interface CreateTaskRequest {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: optional string description = 2;
     */
    description?: string;
}
/**
 * @generated from protobuf message todo.v1.CreateTaskResponse
 */
export interface CreateTaskResponse {
    /**
     * @generated from protobuf field: todo.v1.Task task = 1;
     */
    task?: Task;
}
/**
 * @generated from protobuf message todo.v1.UpdateTaskRequest
 */
export interface UpdateTaskRequest {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: optional string title = 2;
     */
    title?: string;
    /**
     * @generated from protobuf field: optional bool completed = 3;
     */
    completed?: boolean;
    /**
     * @generated from protobuf field: optional string description = 4;
     */
    description?: string;
}
/**
 * @generated from protobuf message todo.v1.UpdateTaskResponse
 */
export interface UpdateTaskResponse {
    /**
     * @generated from protobuf field: todo.v1.Task task = 1;
     */
    task?: Task;
}
/**
 * @generated from protobuf message todo.v1.TaskFilter
 */
export interface TaskFilter {
    /**
     * @generated from protobuf field: todo.v1.FilterField filter_field = 1;
     */
    filterField: FilterField;
    /**
     * @generated from protobuf field: string pattern = 2;
     */
    pattern: string;
}
/**
 * If no Id nor TaskFilter specified fetch all tasks
 *
 * @generated from protobuf message todo.v1.FetchTaskRequest
 */
export interface FetchTaskRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional todo.v1.TaskFilter filter = 2;
     */
    filter?: TaskFilter;
}
/**
 * @generated from protobuf message todo.v1.FetchTaskResponse
 */
export interface FetchTaskResponse {
    /**
     * @generated from protobuf field: todo.v1.TaskList task_list = 1;
     */
    taskList?: TaskList;
}
/**
 * @generated from protobuf message todo.v1.DeleteTaskRequest
 */
export interface DeleteTaskRequest {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message todo.v1.DeleteTaskResponse
 */
export interface DeleteTaskResponse {
    /**
     * @generated from protobuf field: todo.v1.Task task = 1;
     */
    task?: Task;
}
/**
 * @generated from protobuf enum todo.v1.FilterField
 */
export enum FilterField {
    /**
     * If unspecified filter by both fields
     *
     * @generated from protobuf enum value: FILTERFIELD_UNSPECIFIED = 0;
     */
    FILTERFIELD_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: FILTERFIELD_TITLE = 1;
     */
    FILTERFIELD_TITLE = 1,
    /**
     * @generated from protobuf enum value: FILTERFIELD_DESCRIPTION = 2;
     */
    FILTERFIELD_DESCRIPTION = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskRequest$Type extends MessageType<CreateTaskRequest> {
    constructor() {
        super("todo.v1.CreateTaskRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message todo.v1.CreateTaskRequest
 */
export const CreateTaskRequest = new CreateTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskResponse$Type extends MessageType<CreateTaskResponse> {
    constructor() {
        super("todo.v1.CreateTaskResponse", [
            { no: 1, name: "task", kind: "message", T: () => Task }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message todo.v1.CreateTaskResponse
 */
export const CreateTaskResponse = new CreateTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskRequest$Type extends MessageType<UpdateTaskRequest> {
    constructor() {
        super("todo.v1.UpdateTaskRequest", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "completed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message todo.v1.UpdateTaskRequest
 */
export const UpdateTaskRequest = new UpdateTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskResponse$Type extends MessageType<UpdateTaskResponse> {
    constructor() {
        super("todo.v1.UpdateTaskResponse", [
            { no: 1, name: "task", kind: "message", T: () => Task }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message todo.v1.UpdateTaskResponse
 */
export const UpdateTaskResponse = new UpdateTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskFilter$Type extends MessageType<TaskFilter> {
    constructor() {
        super("todo.v1.TaskFilter", [
            { no: 1, name: "filter_field", kind: "enum", T: () => ["todo.v1.FilterField", FilterField] },
            { no: 2, name: "pattern", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message todo.v1.TaskFilter
 */
export const TaskFilter = new TaskFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchTaskRequest$Type extends MessageType<FetchTaskRequest> {
    constructor() {
        super("todo.v1.FetchTaskRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "filter", kind: "message", T: () => TaskFilter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message todo.v1.FetchTaskRequest
 */
export const FetchTaskRequest = new FetchTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchTaskResponse$Type extends MessageType<FetchTaskResponse> {
    constructor() {
        super("todo.v1.FetchTaskResponse", [
            { no: 1, name: "task_list", kind: "message", T: () => TaskList }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message todo.v1.FetchTaskResponse
 */
export const FetchTaskResponse = new FetchTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTaskRequest$Type extends MessageType<DeleteTaskRequest> {
    constructor() {
        super("todo.v1.DeleteTaskRequest", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message todo.v1.DeleteTaskRequest
 */
export const DeleteTaskRequest = new DeleteTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTaskResponse$Type extends MessageType<DeleteTaskResponse> {
    constructor() {
        super("todo.v1.DeleteTaskResponse", [
            { no: 1, name: "task", kind: "message", T: () => Task }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message todo.v1.DeleteTaskResponse
 */
export const DeleteTaskResponse = new DeleteTaskResponse$Type();
/**
 * @generated ServiceType for protobuf service todo.v1.Todo
 */
export const Todo = new ServiceType("todo.v1.Todo", [
    { name: "CreateTask", options: {}, I: CreateTaskRequest, O: CreateTaskResponse },
    { name: "UpdateTask", options: {}, I: UpdateTaskRequest, O: UpdateTaskResponse },
    { name: "FetchTask", options: {}, I: FetchTaskRequest, O: FetchTaskResponse },
    { name: "DeleteTask", options: {}, I: DeleteTaskRequest, O: DeleteTaskResponse }
]);
